import re
from convert import toHex
from simpleMachine import instName

from BasicCompileError import BasicCompileError
from basicFunctions import basicFunctions
import asmInstructions as asm
import traceback
import sys

class Variable:
    def __init__(self, program, name, mAdr, rAdr=-1):
        self.pgm = program
        self.name = name
        self.mAdr = mAdr
        self.rAdr = rAdr
        if rAdr > -1:
            self.storeToMem()
    
    def loadToReg(self, reg, mark=True):
        if self.rAdr == reg: # already loaded here
            return
        if self.pgm.regUsed[reg] != False and self.pgm.regUsed[reg] != self:
            raise BasicCompileError(f'Register {reg} was already in use, could not load {self.name}')
        self.pgm.add(asm.LOAD_MEM, reg, self.mAdr)
        if mark:
            self.markReg(reg, True)
    
    def storeToMem(self, reg=None, clear=True):
        if reg == None: # reg not passed
            reg = self.rAdr
        if reg == -1: # not in a register
            return
        self.pgm.add(asm.STORE, reg, self.mAdr)
        if clear:
            self.pgm.regUsed[reg] = False # let the program know this register is free now and can be reassigned
            self.rAdr = -1
    
    def clearFromReg(self, reg=None, mark=True):
        if reg == None:
            reg = self.rAdr
            mark = True
        if reg == -1:
            return # not in any register
        self.pgm.regUsed[self.rAdr] = False # let the program know this register is free now and can be reassigned
        if mark: self.rAdr = -1
    
    def markReg(self, reg, override=False):
        if override:
            self.clearFromReg()
        self.pgm.regUsed[reg] = self
    
    def inReg(self):
        return self.rAdr != -1

class Jump:
    def __init__(self, adr, name, lineN):
        self.adr = adr
        self.name = name
        self.lineN = lineN
    
    def resolve(self, pgm):
        if self.name not in pgm.jumpPoints:
            raise BasicCompileError(f'Could not resolve jump point "{self.name}"', self.lineN)
        pgm.machine[self.adr+1] = bytes(pgm.jumpPoints[self.name])
        return True

class Program:
    def __init__(self):
        self.variables = {}
        self.compiled = False
        self.error = ''
        self.machine = []
        self.jumpPoints = {}
        self.jumps = []
        self.regUsed = [False] * 0x10
        self.nextMem = 0x80
    
    def getMachine(self):
        if not self.compiled:
            return None
        # m = [bytes(1)] * len(self.machine)
        # for i in range(len(self.machine)):
            # m[i] = int.to_bytes(self.machine[i], "big")
        # return m
        return self.machine
    
    def addVar(self, name, mAdr, rAdr=-1):
        if name in self.variables:
            return None
        var = Variable(self, name, mAdr, rAdr)
        self.variables[name] = var
        var.storeToMem()
        return var
    
    def add(self, instruction, reg=0x0, op1=0x0, op2=None):
        if op2 != None:
            op1 = op1*0x10 + op2
        
        self.machine.append((instruction*0x10 + reg).to_bytes(1, "big"))
        self.machine.append(op1.to_bytes(1, "big"))
        return len(self.machine)
    
    def nextReg(self, start=0x0):
        for i in range(start, 0x10):
            if not self.regUsed[i]:
                return i
        return -1
    
    # def compileError(self, lineN, error, line, ptc=False):
    #     self.error = f'Compile error on line {lineN}: {error};\nLine: {line}'
    #     if ptc: print(self.error)
    
    def compile(self, filename):
        self.variables = {}
        self.compiled = False
        self.error = ''
        self.machine = []
        self.jumpPoints = {}
        self.jumps = []
        self.regUsed = [False] * 0x10
        self.nextMem = 0x80
        
        f = open(filename, "r")
        lines = f.read().split("\n")
        
        for lineN in range(len(lines)):
            line = lines[lineN]
        
            if len(line) <= 0:
                continue
            
            try:
                self._compileLine(line, lineN)
            except BasicCompileError as e:
                e.setLine(lineN, line)
                self.compileError = str(e)
                self.error = e
                return None
            except Exception as e:
                self.error = e
                self.compileError = 'Internal error'
                return None
        
        try:
            self.resolveJumps()
        except BasicCompileError as e:
            e.setLine(e.lineN, lines[e.lineN])
            self.compileError = str(e)
            self.error = e
            return None
        except Exception as e:
            self.error = e
            self.compileError = 'Internal error'
            return None
        # except BasicCompileError as e:
        #     self.error = e.toString(e.lineN, lines[e.lineN])
        #     return None
        
        self.compiled = True
    
    def _compileLine(self, line, lineN):
        line = split(r'\s*--\s*', line)[0]
        line = split(r'\s*//\s*', line)[0]
        line = split(r'\s*##\s*', line)[0]
            
        if len(line) <= 0:
            return
        
        if line[0] == ':':
            if not self._addJP(line[1:]):
                raise BasicCompileError(f'Jump point "{line[1:]}" was already defined')
            return
        
        if line == 'HALT':
            self.add(asm.HALT)
            return
        
        if re.search(r'^goto\s+', line):
            mtc = split(r'^goto\s+', line)[1]
            if not mtc or mtc=='':
                raise BasicCompileError(f'Could not parse goto')
            dest = mtc
            self._addGoto(dest, lineN)
            return
        
        if re.search(r'^var\s+\w+', line): # Defining a new variable
            name = re.match(r'^var\s*(\w+)', line).groups()[0]
            if self.nextMem > 0xff:
                raise BasicCompileError('Out of memory addresses for variable {name}')
            var = self.addVar(name, self.nextMem)
            self.nextMem += 1
            
            if re.search(r'^var\s+\S*\s*=\s*\S+', line): # Initialize the value of the variable
                val = re.match(r'^var\s+\S*\s*=\s*(\S+)', line).groups()[0]
                if val in self.variables: # copy value
                    v2 = self.variables[val]
                    if v2.inReg():
                        var.storeToMem(v2.rAdr, False)
                        return
                    else:
                        v2.loadToReg(0x0, False)
                        var.storeToMem(0x0)
                        return
                elif val[0] == 'm': # from mem
                    try:
                        self.add(asm.LOAD_MEM, 0x0, int(val[1:], 16))
                        var.storeToMem(0x0)
                        return
                    except ValueError:
                        raise BasicCompileError(f'Could not read memory address "{val}"')
                elif val[0] == 'p': # from per
                    try:
                        self.add(asm.LOAD_P, 0x0, int(val[1:], 16))
                        var.storeToMem(0x0)
                        return
                    except ValueError:
                        raise BasicCompileError(f'Could not read peripheral address "{val}"')
                elif val[0:2] == '0x': # from hex
                    try:
                        self.add(asm.LOAD, 0x0, int(val, 16))
                        var.storeToMem(0x0)
                        return
                    except ValueError:
                        raise BasicCompileError(f'Could not read hex value "{val}"')
                else: # probably in base 10
                    try:
                        self.add(asm.LOAD, 0x0, int(val))
                        var.storeToMem(0x0)
                        return
                    except ValueError:
                        raise BasicCompileError(f'Unknown value "{val}"')
        
        if re.search(r'^if\s+', line):
            self._compileIf(lineN, line)
            return
        
        # a, fName = split(r'^[\w]\(', line)
        # print(a, fName)
        # fMtc = re.match(r'^(\W+)\((.*)\)\Z', line)
        fMtc = re.match(r'([^\(]+)\((.*)\)', line)
        # if fName != '': # Calling a function
        if fMtc:
            fName, params = fMtc.groups()
            if fName in basicFunctions: # if it is a basic function
                basicFunctions[fName](self, params)
                return
            else: 
                # TODO custom user defined function check here
                raise BasicCompileError(f'Unknown function "{fName}"')
        
        if re.search(r'\w+\s*[+]?=', line):
            self._parseAssignment(line)
            return
        
        raise BasicCompileError(f'Unknown operation')
    
    def _addJP(self, name):
        if name in self.jumpPoints:
            return False
        self.jumpPoints[name] = len(self.machine)
        return True
    
    def _addJump(self, t, reg, name, lineN):
        self.jumps.append(Jump(len(self.machine), name, lineN))
        self.add(t, reg)
    def _addGoto(self, name, lineN):
        self._addJump(asm.JUMP, 0, name, lineN)
    
    def _compileIf(self, lineN, line):
        mtc = re.match(r'^if\s+(\S+)\s*(==|<|<=|>|>=|!=|=)\s*(\S+)\s*:\s*(\S+)', line)
        if not mtc:
            raise BasicCompileError('Could not parse if statement')
        p0, cmp, p1, j = mtc.groups()
        if(cmp == '='):
            raise BasicCompileError('Can not assign in comparison')
        r0 = None
        v0 = None
        r1 = None
        v1 = None
        r0v = False
        if(p0 in self.variables):
            # r0 = alias[p0]
            var = self.variables[p1]
            if not var.inReg():
                # r1 = self.nextReg(0)
                r0 = 0
                if not var.loadToReg(r0):
                    return None
            else:
                r0 = var.rAdr
            v0 = var
        elif(p0[0] == 'r'):
            r0 = int(p0[1:], 16)
        elif(p0[0] == 'm'):
            raise BasicCompileError(f'Can not compare with memory')
        elif(p0[0] == 'p'):
            raise BasicCompileError(f'Can not compare with peripheral')
        elif(p0[0:2] == '0x'):
            r0 = 0xf
            r0v = True
            self.add(asm.LOAD, r0, int(p0,16))
        else:
            raise BasicCompileError(f'Unknown value "{p0}"')
        
        if(p1 in self.variables):
            # r1 = alias[p1]
            var = self.variables[p1]
            if not var.inReg():
                r1 = self.nextReg(0)
                if r1 == -1:
                    raise BasicCompileError(f'Could not load variable {p1} into register, none free')
                var.loadToReg(r1)
                pass
            else:
                r1 = var.rAdr
            v1 = var
        elif(p1[0] == 'r'):
            r1 = int(p1[1:], 16) 
        elif(p1[0] == 'm'):
            r1 = 0x0
            if(r0 == 0):
                r1 = 0xf
            self.add(asm.LOAD_MEM, r1, int(p1[1:], 16))
        elif(p1[0] == 'p'):
            r1 = 0x0
            if(r0 == 0):
                r1 = 0xf
            self.add(asm.LOAD_P, r1, int(p1[1:], 16))
        elif(p1[0:2] == '0x'):
            if(r0v):
                raise BasicCompileError(f'Can not compare two numbers')
            r1 = 0x0
            if(r0 == 0):
                r1 = 0xf
            self.add(asm.LOAD, r1, int(p1,16))
        else:
            raise BasicCompileError(f'Unknown value "{p1}"')
        
        if(r0 != 0 and r1 != 0):
            self.add(asm.MOVE, 0, r0, 0)
        
        actions = []
        r = r1
        if(r0 == 0):
            if(cmp == '=='): # r0 == rn 
                actions = [ [asm.JUMP, False] ]
            elif(cmp == '!='): # not r0 == rn
                actions = [ [asm.JUMP, True] ]
            elif(cmp == '<'): # r0 < rn
                actions = [ [asm.JUMP_L, False] ]
            elif(cmp == '<='): # r0 < rn or r0 == rn
                actions = [ [asm.JUMP_L, False], False, [asm.JUMP, False] ]
            elif(cmp == '>'): # not r0 < rn and not r0 == r1
                actions = [ [asm.JUMP_L, True], True, [asm.JUMP, True] ]
            elif(cmp == '>='): # not r0 < rn
                actions = [ [asm.JUMP_L, True] ]
            else:
                raise BasicCompileError(f'Unknown comparison "{cmp}"')
        else:
            r = r0
            if(cmp == '=='): # r0 == rn
                actions = [ [asm.JUMP, False] ]
            elif(cmp == '!='): # not r0 == rn
                actions = [ [asm.JUMP, True] ]
            elif(cmp == '<'): # not r0 < rn and not r0 == rn
                actions = [ [asm.JUMP_L, True], True, [asm.JUMP, True] ]
            elif(cmp == '<='): # not r0 < rn
                actions = [ [asm.JUMP_L, True] ]
            elif(cmp == '>'): # r0 < rn
                actions = [ [asm.JUMP_L, False] ]
            elif(cmp == '>='): # r0 < rn or r0 == rn
                actions = [ [asm.JUMP_L, False], False, [asm.JUMP, False] ]
            else:
                raise BasicCompileError(f'Unknown comparison "{cmp}"')
        
        if len(actions) == 1:
            if actions[0][1]: # not
                self.add(actions[0][0], r, len(machine)+4)
                self._addGoto(j, lineN)
            else:
                self._addJump(actions[0][0], r, j, lineN)
        else:
            if actions[1]: # not and not
                self.add(actions[0][0], r, len(machine)+6)
                
                self.add(actions[2][0], r, len(machine)+4)
                self._addGoto(j, lineN)
            else: # or
                if actions[0][1]: # not
                    self.add(actions[0][0], r, len(machine)+4)
                    self._addGoto(j, lineN)
                else:
                    self._addJump(actions[0][0], r, j)
                
                if actions[2][1]: # not
                    self.add(actions[2][0], r, len(machine)+4)
                    self._addGoto(j, lineN)
                else:
                    self._addJump(actions[2][0], r, j, lineN)
        if v0: v0.clearFromReg()
        if v1: v1.clearFromReg()
    
    def _parseAssignment(self, line):
        mtc = re.match(r'^(\w+)\s*([+]?=)\s*(\w+)\s*([+\^&|])?\s*(\w+)?', line)
        if not mtc:
            raise BasicCompileError('Could not parse assignment')
        # print(mtc.groups())
        dest, asg, src1, op, src2 = mtc.groups()
        
        mth = asg != '=' or op # if this is math
        
        dr = -1
        dv = None
        dm = -1
        dp = -1
        if dest in self.variables:
            dv = self.variables[dest]
            if mth:
                if not dv.inReg():
                    dr = self.nextReg()
                    if dr == -1:
                        raise BasicCompileError(f'Could not assign variable {dest} to register, none free')
                    dv.markReg(dr, True)
                else:
                    dr = dv.rAdr
            else:
                dm = dv.mAdr
        elif dest[0] == 'm':
            dm = int(dest[1:],16)
            if mth:
                dr = self.nextReg()
                if dr == -1:
                    raise BasicCompileError(f'Could not reserve register for m{toHex(dm,2)}, none free')
                self.regUsed[dr] = True
        elif dest[0] == 'p':
            dp = int(dest[1:],16)
            if mth:
                dr = self.nextReg()
                if dr == -1:
                    raise BasicCompileError(f'Could not reserve register for p{toHex(dp,2)}, none free')
                self.regUsed[dr] = True
        else:
            raise BasicCompileError(f'Unknown destination for assignment: "{dest}"')
        
        sr = -1
        sv = None
        if src1 in self.variables:
            sv = self.variables[src1]
            if not sv.inReg():
                sr = self.nextReg()
                if sr == -1:
                    raise BasicCompileError(f'Could not assign variable {src1} to register, none free')
                sv.markReg(sr, True)
            else:
                sr = sv.rAdr
        elif src1[0] == 'm':
            sm = int(src1[1:],16)
            sr = self.nextReg()
            if sr == -1:
                raise BasicCompileError(f'Could not put m{toHex(sm,2)} into a register, none free')
            self.regUsed[sr] = True
            self.add(asm.LOAD_MEM, sr, sm)
        elif src1[0] == 'p':
            sp = int(src1[1:],16)
            sr = self.nextReg()
            if sr == -1:
                raise BasicCompileError(f'Could not put p{toHex(sp,2)} into a register, none free')
            self.regUsed[sr] = True
            self.add(asm.LOAD_P, sr, sp)
        elif src1[0:2] == '0x':
            val = int(src1, 16)
            sr = self.nextReg()
            if sr == -1:
                raise BasicCompileError(f'Could not put number 0x{toHex(val,2)} into a register, none free')
            self.regUsed[sr] = True
            self.add(asm.LOAD, sr, val)
        else:
            raise BasicCompileError(f'Unknown source for assignment: "{src1}"')
        
        if mth: # this is math
            sr2 = -1
            sv2 = None
            
            if asg != '=':
                op = asg[0]
                sr2 = sr
                sv2 = sv
                sr = dr
                sv = dv
                # raise BasicCompileError(f'Self assignment statements are not available yet')
            else:
                if src2 in self.variables:
                    sv2 = self.variables[src1]
                    if not sv2.inReg():
                        sr2 = self.nextReg()
                        if sr2 == -1:
                            raise BasicCompileError(f'Could not assign variable {src2} to register, none free')
                        sv2.markReg(sr, True)
                    else:
                        sr2 = sv2.rAdr
                elif src2[0] == 'm':
                    sm = int(src2[1:],16)
                    sr2 = self.nextReg()
                    if sr2 == -1:
                        raise BasicCompileError(f'Could not put m{toHex(sm,2)} into a register, none free')
                    self.regUsed[sr2] = True
                    self.add(asm.LOAD_MEM, sr2, sm)
                elif src2[0] == 'p':
                    sp = int(src2[1:],16)
                    sr2 = self.nextReg()
                    if sr2 == -1:
                        raise BasicCompileError(f'Could not put p{toHex(sp,2)} into a register, none free')
                    self.regUsed[sr2] = True
                    self.add(asm.LOAD_P, sr2, sp)
                elif src2[0:2] == '0x':
                    val = int(src2, 16)
                    sr2 = self.nextReg()
                    if sr2 == -1:
                        raise BasicCompileError(f'Could not put number 0x{toHex(val,2)} into a register, none free')
                    self.regUsed[sr2] = True
                    self.add(asm.LOAD, sr2, val)
                else:
                    raise BasicCompileError(f'Unknown source for math: "{src1}"')
            
            if op == '+':
                self.add(asm.ADD_S, dr, sr, sr2)
            elif op == '&':
                self.add(asm.AND, dr, sr, sr2)
            elif op == '|':
                self.add(asm.OR, dr, sr, sr2)
            elif op == '^':
                self.add(asm.XOR, dr, sr, sr2)
            else:
                raise BasicCompileError(f'Unknown operator: "{op}"')
            
            if dv:
                dv.storeToMem(dr)
            elif dm >= 0:
                self.add(asm.STORE, dr, dm)
            elif dp >= 0:
                self.add(asm.STORE_P, dr, dp)
            
            if sv: sv.clearFromReg()
            if sv2: sv2.clearFromReg()
            return
        
        if dm >= 0:
            self.add(asm.STORE, sr, dm)
        elif dp >= 0:
            self.add(asm.STORE_P, sr, dp)
        else:
            raise Exception('How did we get here?')
            # self.add(asm.MOVE, 0x0, sr, dr)
            # dv.storeToMem(dr)
            
        if dv: dv.clearFromReg()
        if sv: sv.clearFromReg()
            
    
    def resolveJumps(self):
        for jump in self.jumps:
            jump.resolve(self)
    
    def storeBinToFile(self, filename):
        if not self.compiled:
            raise Exception('Compile program before writing to file')
        
        with open(filename, "wb") as binary_file:
            for i in range(len(self.machine)):
                binary_file.write(self.machine[i])

def split(regex, string):
    s = re.search(regex, string)
    if s is not None:
        sp = s.span()
        return [string[:sp[0]], string[sp[1]:]]
    else:
        return [string, ""]

def storeToFile(filename, m):
    with open(filename, "wb") as binary_file:
        for i in range(len(m)):
            binary_file.write(m[i])

###############
###         ### 
###   GUI   ###
###         ###
###############

import tkinter as tk

def showGui():
    root = tk.Tk()
    root.title('Basic Compile')
    
    fileFrame = tk.LabelFrame(root, text='Files')
    fileFrame.pack()
    
    srcFrame = tk.Frame(fileFrame)
    srcFrame.pack()
    srcLabel = tk.Label(srcFrame, text='Source', anchor=tk.E, width=10)
    srcLabel.pack(side=tk.LEFT)
    srcFile = tk.Entry(srcFrame, width = 50)
    srcFile.insert(0, 'basic/test.basic')
    srcFile.pack(side=tk.LEFT)
    
    destFrame = tk.Frame(fileFrame)
    destFrame.pack()
    destLabel = tk.Label(destFrame, text='Destination', anchor=tk.E, width=10)
    destLabel.pack(side=tk.LEFT)
    destFile = tk.Entry(destFrame, width = 50)
    destFile.insert(0, 'bin/test.b.bin')
    destFile.pack(side=tk.LEFT)
    
    
    outputFrame = tk.LabelFrame(root, text='Output')
    outputFrame.pack()
    
    outputLabel = tk.Label(outputFrame, width = 50, text='', anchor=tk.W, justify=tk.LEFT, font=('Consolas', 11))
    outputLabel.pack()
    
    machine = None
    def compileAndOutput():
        file = srcFile.get()
        global machine
        try:
            machine = compile(file, False)
        except BasicCompileError as e:
            outputLabel.configure(text=e.toString('[unknown]','[unknown]'))
            return
        except Exception as e:
            outputLabel.configure(text='An error occurred, check console for more details')
            print(e)
            return
        text = ''
        if(machine != None):
            for i in range(int(len(machine)/2)):
                if(i > 0): text += '\n'
                instr = int.from_bytes(machine[i*2], "big") << 8
                instr += int.from_bytes(machine[i*2+1], "big")
                text += f'i{toHex(i*2)} │ 0x{toHex(instr,4)} │ {instName(instr)}'
        else:
            text = lastError
        outputLabel.configure(text=text)
    
    cmpButton = tk.Button(srcFrame, text='Compile', command=compileAndOutput, width=10)
    cmpButton.pack()
    
    def storeOutput():
        file = destFile.get()
        if(machine): storeToFile(file, machine)
    
    storeButton = tk.Button(destFrame, text='Store', command=storeOutput, width=10)
    storeButton.pack()
    
    root.mainloop()

if __name__ == '__main__':
    # showGui()
    pgm = Program()
    pgm.compile('basic/test2.basic')
    if not pgm.compiled:
        # print('Compile error: '+pgm.error)
        if isinstance(pgm.error, BasicCompileError):
            print(pgm.compileError)
        else:
            print(pgm.error)
            # print(traceback.format_exc())
            traceback.print_tb(pgm.error.__traceback__)
        print('Dump: ')
        print(f'Registers Used:')
        for r in range(len(pgm.regUsed)):
            u = pgm.regUsed[r]
            if u and u != True:
                print(f'\tr{toHex(r,1)} in use by {u.name}')
            elif u == True:
                print(f'\tr{toHex(r,1)} in use')
            else:
                print(f'\tr{toHex(r,1)} not in use {u}')
    else:
        machine = pgm.getMachine()
        for i in range(len(machine)//2):
            instr = int.from_bytes(machine[i*2],"big") * 0x100
            instr += int.from_bytes(machine[i*2+1],"big")
            print(toHex(i*2), toHex(int.from_bytes(machine[i*2],"big")), toHex(int.from_bytes(machine[i*2+1],"big")), instName(instr))